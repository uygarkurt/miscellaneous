// For big numbers, it takes a while.

#include <iostream>
#include <chrono>
#include <stdio.h>
#include <cmath>
#include <limits.h>
#include <string>
#include <vector>
using namespace std; 

#define FIRSTDATATYPE unsigned long// choose a data type here
#define SECONDDATATYPE unsigned short// choose a data type here

FIRSTDATATYPE gcd(FIRSTDATATYPE a, FIRSTDATATYPE b) {
	return b == 0 ? a : gcd(b, a % b);
}


// Since d*e can become too big, to prevent overflow make calculations as string.
// This function takes to string value and returns their multiplication in string form.
string multiply(string num1, string num2) 
{
    int n1 = num1.size(); 
    int n2 = num2.size(); 
    if (n1 == 0 || n2 == 0) 
    return "0"; 
    vector<int> result(n1 + n2, 0); 
    int i_n1 = 0;  
    int i_n2 = 0;         
    for (int i=n1-1; i>=0; i--) 
    { 
        int carry = 0; 
        int n1 = num1[i] - '0'; 
        i_n2 = 0;              
        for (int j=n2-1; j>=0; j--) 
        { 
            int n2 = num2[j] - '0';   
            int sum = n1*n2 + result[i_n1 + i_n2] + carry;                
            carry = sum/10;           
            result[i_n1 + i_n2] = sum % 10;   
            i_n2++; 
        }       
        if (carry > 0) 
            result[i_n1 + i_n2] += carry;   
        i_n1++; 
    } 
   
    int i = result.size() - 1; 
    while (i>=0 && result[i] == 0) 
    i--;    
    if (i == -1) 
    return "0";      
    string s = "";        
    while (i >= 0) 
        s += std::to_string(result[i--]);   
    return s; 
} 

// Taking x^y%p in bitwise.
int power(long long x, long long y, long long p) 
{ 
    int res = 1;
    x = x % p; 
    while (y > 0) 
    { 
        if (y & 1) 
            res = (res*x) % p; 
        y = y>>1;
        x = (x*x) % p;   
    } 
    return res; 
} 

class RSA {
private:
	SECONDDATATYPE p;
	SECONDDATATYPE q;
	FIRSTDATATYPE d;
public:
	FIRSTDATATYPE e;
	FIRSTDATATYPE n;
	FIRSTDATATYPE r;
	RSA(SECONDDATATYPE p, SECONDDATATYPE q) {
		n=p*q;
		r=(p-1)*(q-1);
		for(e=2; gcd(e, r)!=1; e++){}
		long long temp2=0; d=0;
		// First turning into string to handle overflow.
		while((temp2)%r!=1)
		{
			d++;
			string temp=multiply(to_string(d), to_string(e));
			temp2=stoll(temp);
		}
	}

	FIRSTDATATYPE encrypt(FIRSTDATATYPE m) {
		FIRSTDATATYPE c=m;
		FIRSTDATATYPE temp=m;
		for(int i=0; i<e-1; i++)
		{
			// Taking modulus constantly to hande overflow.
			c*=temp;
			c%=n;
		}
		return c;
	}

	FIRSTDATATYPE decrypt_bit(FIRSTDATATYPE c) {
		// Calling power function.
		c=power(c, d, n);
		return c;
	}
};


int main () {
	RSA rsa(5, 11);

	auto start = std::chrono::system_clock::now();
	FIRSTDATATYPE c = rsa.encrypt(15);
	auto end = std::chrono::system_clock::now();
	chrono::duration<double> elapsed_seconds = end - start;
	time_t end_time = std::chrono::system_clock::to_time_t(end);
	cout << "Encryption time: " << elapsed_seconds.count() << "s -- " << " ciphertext is " << c << "\n";

	start = std::chrono::system_clock::now();
	FIRSTDATATYPE m_bit = rsa.decrypt_bit(c);
	end = std::chrono::system_clock::now();
	elapsed_seconds = end - start;
	end_time = std::chrono::system_clock::to_time_t(end);
	cout << "Decryption time: " << elapsed_seconds.count() << "s -- " << " message is " << m_bit << "\n";



	return 0;
}
